#!/usr/bin/env python3

import argparse
import subprocess
import os
import shutil


def run(cmd):
    process_handle = subprocess.Popen(['bash', '-c', cmd], cwd='.')
    return process_handle

def main():
    parser = argparse.ArgumentParser(description='Gazebo simulation')

    parser.add_argument('--world', help='World to run in Gazebo', required=False, default="default")
    parser.add_argument('--gz_partition', help='Gazebo partition to run in', required=False)
    parser.add_argument('--gz_ip', help='Outgoing network interface to use for traffic',required=False)
    parser.add_argument('--model_store', help='Path to model storage directory', required=False, default="~/.simulation-gazebo")
    parser.add_argument('--dryrun', help='Test in dryrun. Do not launch gazebo', required=False, default=False, action='store_true')
    parser.add_argument('--headless', help='Run Gazebo without GUI', required=False, default=False, action='store_true')
    parser.add_argument('--render-engine', help='Rendering engine (ogre or ogre2)', required=False, choices=['ogre', 'ogre2'], default='ogre2')
    args = parser.parse_args()

    # Set up environment variables to look for models for simulation
    args.model_store = os.path.expanduser(args.model_store)

    # Check whether the model storage directory exists.
    if not os.path.exists(args.model_store):
        print("Making model storage directory")
        os.makedirs(args.model_store)


    model_count = int(subprocess.check_output(f'find {args.model_store} -type f | wc -l', shell=True, text=True))
    models_exist = True if model_count > 0 else False
    print(f"Found: {model_count} files in {args.model_store}")

    # Launch gazebo simulation
    print('> Launching gazebo simulation...')
    if not args.dryrun:
        cmd = f'GZ_SIM_RESOURCE_PATH={args.model_store}/models '
        # cmd += f'GZ_SIM_SYSTEM_PLUGIN_PATH={args.model_store}/plugins '
        cmd += f'GZ_SIM_SERVER_CONFIG_PATH={args.model_store}/server.config '
        cmd += f'gz sim -r --render-engine {args.render_engine} {args.model_store}/worlds/{args.world}.sdf'

        if args.headless:
            cmd = f'{cmd} -s'

        if args.gz_partition:
            cmd = f'GZ_PARTITION={args.gz_partition} {cmd}'
        if args.gz_ip:
            cmd = f'GZ_IP={args.gz_ip} {cmd}'

        try:
            process_handle = run(cmd)

            while process_handle.poll() is None:
                process_handle.wait()

        except KeyboardInterrupt:
            exit(0)

if __name__ == "__main__":
    main()
